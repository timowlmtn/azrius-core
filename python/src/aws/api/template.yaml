AWSTemplateFormatVersion: '2010-09-09'
Description: CORS-enabled API Gateway for /register backed by Lambda

Parameters:
  HandlerFunctionArn:
    Type: String
    Description: ARN of the Lambda function to invoke

Resources:
  # 1. API Gateway RestApi
  AzriusCorsApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: AzriusCorsApi

  # 2. /register Resource
  RegisterResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AzriusCorsApi
      ParentId: !GetAtt AzriusCorsApi.RootResourceId
      PathPart: register

  # 3. CORS Preflight OPTIONS
  RegisterOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AzriusCorsApi
      ResourceId: !Ref RegisterResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # 4. POST Method â†’ Lambda Proxy
  RegisterPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AzriusCorsApi
      ResourceId: !Ref RegisterResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HandlerFunctionArn}/invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # 5. Deployment & Stage
  AzriusDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref AzriusCorsApi
    DependsOn:
      - RegisterOptionsMethod
      - RegisterPostMethod

  AzriusStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: Prod
      RestApiId: !Ref AzriusCorsApi
      DeploymentId: !Ref AzriusDeployment

  # 6. Permission for API Gateway to invoke Lambda
  ApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HandlerFunctionArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AzriusCorsApi}/*/POST/register

Outputs:
  RegisterInvokeURL:
    Description: "Invoke URL for POST /register"
    Value: !Sub "https://${AzriusCorsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/register"
