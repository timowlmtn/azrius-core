AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Azrius AWS Web API to manage the Azrius pipeline.

Globals:
  Function:
    Timeout: 10
    Runtime: python3.12

Parameters:
  CoreLayerArn:
    Type: String
    Description: ARN of the core code for Azrius Analytics (our code)

  RequirementsLayerArn:
    Type: String
    Description: ARN of the requirements for Requirements (web/app/aws/layer/requirements.txt)

  SecretsJson:
    Type: String
    Description: JSON string of secrets baked at build time

  SecretsArn:
    Type: String
    Description: ARN of the AWS Secrets Manager secret for all credentials

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: The VPC ID defined for the application

  # Redis security group
  SecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Security Group IDs that Lambda will use

  VpcSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: VPC Subnet IDs that Lambda will use (min 2 for HA)


Resources:
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda ENIs
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: -1  # -1 means all protocols
          CidrIp: 0.0.0.0/0  # Open to all IPv4 addresses
      SecurityGroupEgress:
        - IpProtocol: -1  # -1 means all protocols
          CidrIp: 0.0.0.0/0  # Open to all IPv4 addresses
      Tags:
        - Key: Name
          Value: LambdaSecurityGroup

  HandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      CodeUri: api/
      Layers:
        - !Ref CoreLayerArn
        - !Ref RequirementsLayerArn

      Environment:
        Variables:
          SECRETS_ARN: !Ref SecretsArn
          LOCAL_SECRET_STRING: !Ref SecretsJson
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: "*"

        - VPCAccessPolicy: {}

        # This policy gives permission for Lambdas to create/manage ENIs
        # SAM Policy templates you can use: https://github.com/awslabs/serverless-application-model/blob/develop/examples/2016-10-31/policy_templates/all_policy_templates.yaml
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds: !Ref VpcSubnetIds

      Events:
        Debug:
          Type: Api
          Properties:
            Path: /debug
            Method: get

        Echo:
          Type: Api
          Properties:
            Path: /echo
            Method: get

        Register:
          Type: Api
          Properties:
            Path: /register
            Method: post


Outputs:
  DebugHandlerApi:
    Description: "API Gateway endpoint URL for Debug function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/debug/"


  EchoHandlerApi:
    Description: "API Gateway endpoint URL for Echo function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/echo/"

  RegisterHandlerApi:
    Description: "API Gateway endpoint URL for Register function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/register/"

  HandlerFunction:
    Description: "HandlerFunction Lambda Function ARN"
    Value: !GetAtt HandlerFunction.Arn

  HandlerFunctionIamRole:
    Description: "Implicit IAM Role created for HandlerFunction"
    Value: !GetAtt HandlerFunctionRole.Arn
